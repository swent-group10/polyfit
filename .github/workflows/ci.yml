name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Enable KVM for Faster Emulation
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Prepare Local Properties
        run: echo MAPS_API_KEY=\"0\" > ./local.properties

      - name: Setup Gradle Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Android Emulator
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}

      - name: Setup Android Emulator
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true

      - name: Grant Execution Permission for Gradlew
        run: chmod +x ./gradlew

      - name: Run KTFmt Check
        run: ./gradlew ktfmtCheck

      - name: Create Google Services JSON
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: echo $GOOGLE_SERVICES_JSON | base64 -d > ./app/google-services.json

      - name: Build and Lint
        run: ./gradlew assemble lint --parallel --build-cache

      - name: Run Unit Tests
        run: ./gradlew test --parallel --build-cache

      - name: Compile Android Test Kotlin
        run: ./gradlew compileDebugAndroidTestKotlin --parallel --build-cache

      - name: Run Instrumentation Tests
        run: ./gradlew connectedCheck --parallel --build-cache

      - name: Generate Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Upload Report to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube -Dsonar.coverage.jacoco.xmlReportPaths=app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml --parallel --build-cache

      - name: Install xmllint
        run: sudo apt-get install -y libxml2-utils


      # This step retrieve all useful data from the tests
      - name: Coverage results
        run: |
          
          # Coverage results
          # Path to your Jacoco XML report
          JACOCO_XML_PATH="app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
          
          if [ -f $JACOCO_XML_PATH ]; then
              # Using xmllint to parse the XML, extract the line coverage attributes (missed and covered), then sum them up
              TOTAL_MISSED_INSTRUCTIONS=$(xmllint --xpath 'sum(//report/counter[@type="INSTRUCTION"]/@missed)' $JACOCO_XML_PATH)
              TOTAL_COVERED_INSTRUCTIONS=$(xmllint --xpath 'sum(//report/counter[@type="INSTRUCTION"]/@covered)' $JACOCO_XML_PATH)
          
              # Calculate the total lines and coverage percentage
              TOTAL_INSTRUCTIONS=$((TOTAL_MISSED_INSTRUCTIONS + TOTAL_COVERED_INSTRUCTIONS))
              COVERAGE_PERCENTAGE=$(awk "BEGIN {printf \"%.2f\", ($TOTAL_COVERED_INSTRUCTIONS/$TOTAL_INSTRUCTIONS)*100}")
              echo "coverage,$COVERAGE_PERCENTAGE" >> grading-result.csv
          
              if [ 1 -eq "$(echo "$COVERAGE_PERCENTAGE >= 80.0" | bc )" ]; then
                  points=$((points+20))
                  echo "::notice:: Coverage : $COVERAGE_PERCENTAGE% > 80% ✅"
              else
                  echo "::notice:: Coverage : $COVERAGE_PERCENTAGE% < 80% ❌"
                  exit 1
              fi
          else
              echo "coverage,0" >> grading-result.csv
              echo "::notice:: Coverage report not found ❌"
              exit 1
          fi