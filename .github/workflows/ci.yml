name: CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Loading Local.properties (dummy) & Grant execute permission for gradlew
        run: |
          echo MAPS_API_KEY=\"0\" > ./local.properties
          chmod +x ./gradlew

      - name: Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: AVD cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-34

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot for caching."

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      - name: Create Google Services JSON File
        run: echo ${{ secrets.GOOGLE_SERVICES_JSON }} | base64 -di > ./app/google-services.json

      - name: Assemble
        run: ./gradlew assemble lint --parallel --build-cache

      - name: Run tests
        run: ./gradlew check --parallel --build-cache

      - name: Run UI tests
        run: ./gradlew connectedAndroidTest --parallel --build-cache

      - name: Generate coverage
        run: ./gradlew jacocoTestReport

      - name: Upload report to SonarCloud
        run: ./gradlew sonar --parallel --build-cache

      - name: Assemble tests
        run: ./gradlew compileDebugAndroidTestKotlin --parallel --build-cache

      - name: Retrieve results
        run: |
          sudo apt-get install -y libxml2-utils
          JACOCO_XML_PATH="app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
          if [ -f $JACOCO_XML_PATH ]; then
            TOTAL_MISSED_INSTRUCTIONS=$(xmllint --xpath 'sum(//report/counter[@type="INSTRUCTION"]/@missed)' $JACOCO_XML_PATH)
            TOTAL_COVERED_INSTRUCTIONS=$(xmllint --xpath 'sum(//report/counter[@type="INSTRUCTION"]/@covered)' $JACOCO_XML_PATH)
            TOTAL_INSTRUCTIONS=$((TOTAL_MISSED_INSTRUCTIONS + TOTAL_COVERED_INSTRUCTIONS))
            COVERAGE_PERCENTAGE=$(awk "BEGIN {printf \"%.2f\", ($TOTAL_COVERED_INSTRUCTIONS/$TOTAL_INSTRUCTIONS)*100}")
            echo "coverage,$COVERAGE_PERCENTAGE" >> grading-result.csv
            if [ 1 -eq "$(echo "$COVERAGE_PERCENTAGE >= 80.0" | bc )" ]; then
              echo "::notice:: Coverage : $COVERAGE_PERCENTAGE% > 80% ✅"
            else
              echo "::error:: Coverage : $COVERAGE_PERCENTAGE% < 80% ❌"
              exit 1
            fi
          else
            echo "coverage,0" >> grading-result.csv
            echo "::error:: Coverage report not found ❌"
            exit 1
          fi
